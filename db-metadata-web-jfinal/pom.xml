<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>db-metadata-parent</artifactId>
        <groupId>com.hthjsj</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>db-metadata-web-jfinal</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!-- 使用阿里 maven 库 -->
    <repositories>
        <repository>
            <id>ali-maven</id>
            <url>http://maven.aliyun.com/nexus/content/groups/public</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
                <updatePolicy>always</updatePolicy>
                <checksumPolicy>fail</checksumPolicy>
            </snapshots>
        </repository>
    </repositories>

    <dependencies>
        <dependency>
            <groupId>com.hthjsj</groupId>
            <artifactId>db-metadata-analysis</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.jfinal</groupId>
            <artifactId>jfinal-undertow</artifactId>
            <version>1.9</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>28.1-jre</version>
        </dependency>
        <!--        <dependency>-->
        <!--            <groupId>io.undertow</groupId>-->
        <!--            <artifactId>undertow-websockets-jsr</artifactId>-->
        <!--            <version>2.0.25.Final</version>-->
        <!--        </dependency>-->
    </dependencies>
    <name>db-metadata-web-jfinal</name>
    <build>
        <plugins>
            <!--
				当项目的 web 资源在 src/main/webapp 下时，需要使用 maven-resources-plugin
				将 web 资源复制到 jar 包中去，注意打包的时候需要配置 engine：
					me.setBaseTemplatePath("webapp");
					me.setToClassPathSourceFactory();

				如果 web 资源本身就放在 src/main/resources/webapp 之下，则不需要此插件
			-->
            <!--            <plugin>-->
            <!--                <artifactId>maven-resources-plugin</artifactId>-->
            <!--                <version>3.1.0</version>-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <id>copy-webapp</id>-->
            <!--                        <phase>process-sources</phase>-->
            <!--                        <goals>-->
            <!--                            <goal>copy-resources</goal>-->
            <!--                        </goals>-->
            <!--                        <configuration>-->
            <!--                            <encoding>UTF-8</encoding>-->
            <!--                            <outputDirectory>${basedir}/target/config</outputDirectory>-->
            <!--                            <resources>-->
            <!--                                <resource>-->
            <!--                                    <directory>${basedir}/src/main/resources</directory>-->
            <!--                                    <includes>-->
            <!--                                        &lt;!&ndash; <include>**/*.xml</include> &ndash;&gt;-->
            <!--                                        <include>**/**</include>-->
            <!--                                    </includes>-->
            <!--                                </resource>-->
            <!--                            </resources>-->
            <!--                        </configuration>-->
            <!--                    </execution>-->
            <!--                </executions>-->
            <!--            </plugin>-->
            <!--            <plugin>-->
            <!--                <groupId>org.apache.maven.plugins</groupId>-->
            <!--                <artifactId>maven-jar-plugin</artifactId>-->
            <!--                <version>3.1.2</version>-->
            <!--                <configuration>-->
            <!--                    <excludes>-->
            <!--                        <exclude>*.json</exclude>-->
            <!--                        <exclude>*.properties</exclude>-->
            <!--                    </excludes>-->
            <!--                </configuration>-->
            <!--            </plugin>-->
            <!--            <plugin>-->
            <!--                <groupId>org.apache.maven.plugins</groupId>-->
            <!--                <artifactId>maven-shade-plugin</artifactId>-->
            <!--                <version>3.2.1</version>-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <phase>package</phase>-->
            <!--                        <goals>-->
            <!--                            <goal>shade</goal>-->
            <!--                        </goals>-->
            <!--                        <configuration>-->
            <!--                            <finalName>db-metadata-web-jfinal</finalName>-->
            <!--                            <transformers>-->
            <!--                                <transformer-->
            <!--                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">-->
            <!--                                    <mainClass>com.hthjsj.web.AppWebConfig</mainClass>-->
            <!--                                </transformer>-->

            <!--                                &lt;!&ndash;-->
            <!--                                    下面的配置支持排除指定文件打包到 jar 之中，可以用于排除需要修改的配置文件以便于在外部的 config 目录下的-->
            <!--                                    同名配置文件生效，建议使用 Prop.appendIfExists(xxx_pro.txt) 在外部放一个非同名配置来覆盖开发环境的配置-->
            <!--                                    则可以不用使用下面的配置，文档参考:-->
            <!--                                        http://maven.apache.org/plugins/maven-shade-plugin/examples/resource-transformers.html#DontIncludeResourceTransformer-->
            <!--                                &ndash;&gt;-->
            <!--                                <transformer-->
            <!--                                        implementation="org.apache.maven.plugins.shade.resource.DontIncludeResourceTransformer">-->
            <!--                                    <resources>-->
            <!--                                        &lt;!&ndash; <resource>demo-config-dev.txt</resource> &ndash;&gt;-->
            <!--                                        &lt;!&ndash; <resource>.PDF</resource> &ndash;&gt;-->
            <!--                                        &lt;!&ndash; <resource>READ.md</resource> &ndash;&gt;-->
            <!--                                    </resources>-->
            <!--                                </transformer>-->
            <!--                            </transformers>-->

            <!--                            &lt;!&ndash;-->
            <!--                                解决 fatjar 的 "java.lang.SecurityException: Invalid signature file digest-->
            <!--                                for Manifest main attributes" 问题-->
            <!--                            &ndash;&gt;-->
            <!--                            <filters>-->
            <!--                                <filter>-->
            <!--                                    <artifact>*:*</artifact>-->
            <!--                                    <excludes>-->
            <!--                                        <exclude>META-INF/*.SF</exclude>-->
            <!--                                        <exclude>META-INF/*.DSA</exclude>-->
            <!--                                        <exclude>META-INF/*.RSA</exclude>-->
            <!--                                    </excludes>-->
            <!--                                </filter>-->
            <!--                            </filters>-->

            <!--                        </configuration>-->
            <!--                    </execution>-->
            <!--                </executions>-->
            <!--            </plugin>-->


        </plugins>
    </build>
</project>
